// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package newlaw.bpm.processinstance;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import newlaw.bpm.processinstance.ProcessInstance;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProcessInstance_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager ProcessInstance.entityManager;
    
    public static final EntityManager ProcessInstance.entityManager() {
        EntityManager em = new ProcessInstance() {
            public newlaw.domain.Contact getMainContact() {
                throw new UnsupportedOperationException();
            }
            public java.lang.String getReference() {
                throw new UnsupportedOperationException();
            }
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ProcessInstance.countProcessInstances() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ProcessInstance o", Long.class).getSingleResult();
    }
    
    public static List<ProcessInstance> ProcessInstance.findAllProcessInstances() {
        return entityManager().createQuery("SELECT o FROM ProcessInstance o", ProcessInstance.class).getResultList();
    }
    
    public static ProcessInstance ProcessInstance.findProcessInstance(Long id) {
        if (id == null) return null;
        return entityManager().find(ProcessInstance.class, id);
    }
    
    public static List<ProcessInstance> ProcessInstance.findProcessInstanceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ProcessInstance o", ProcessInstance.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void ProcessInstance.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ProcessInstance.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ProcessInstance attached = ProcessInstance.findProcessInstance(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ProcessInstance.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ProcessInstance.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
}
