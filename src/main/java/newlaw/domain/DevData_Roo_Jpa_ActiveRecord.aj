// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package newlaw.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import newlaw.domain.DevData;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DevData_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DevData.entityManager;
    
    public static final EntityManager DevData.entityManager() {
        EntityManager em = new DevData().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DevData.countDevDatas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DevData o", Long.class).getSingleResult();
    }
    
    public static List<DevData> DevData.findAllDevDatas() {
        return entityManager().createQuery("SELECT o FROM DevData o", DevData.class).getResultList();
    }
    
    public static DevData DevData.findDevData(String key_) {
        if (key_ == null || key_.length() == 0) return null;
        return entityManager().find(DevData.class, key_);
    }
    
    public static List<DevData> DevData.findDevDataEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DevData o", DevData.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DevData.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DevData.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DevData attached = DevData.findDevData(this.key_);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DevData.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DevData.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DevData DevData.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DevData merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
